'use strict';

var react = require('react');
var reactSpring = require('react-spring');
var useObserver = require('@alexvcasillas/use-observer');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function FadeIn(_ref) {
  var _ref$threshold = _ref.threshold,
      threshold = _ref$threshold === void 0 ? 0 : _ref$threshold,
      _ref$element = _ref.element,
      element = _ref$element === void 0 ? 'div' : _ref$element,
      _ref$once = _ref.once,
      once = _ref$once === void 0 ? false : _ref$once,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["threshold", "element", "once", "children"]);

  var _useObserver = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver.inView,
      ref = _useObserver.ref;

  var _useState = react.useState(false),
      onceAppeared = _useState[0],
      setOnceAppeared = _useState[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0
  }),
      opacity = _useSpring.opacity;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity
    }),
    ref: ref
  }), children);
}
function FadeInLeft(_ref2) {
  var _ref2$threshold = _ref2.threshold,
      threshold = _ref2$threshold === void 0 ? 0 : _ref2$threshold,
      _ref2$element = _ref2.element,
      element = _ref2$element === void 0 ? 'div' : _ref2$element,
      _ref2$once = _ref2.once,
      once = _ref2$once === void 0 ? false : _ref2$once,
      children = _ref2.children,
      rest = _objectWithoutPropertiesLoose(_ref2, ["threshold", "element", "once", "children"]);

  var _useObserver2 = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver2.inView,
      ref = _useObserver2.ref;

  var _useState2 = react.useState(false),
      onceAppeared = _useState2[0],
      setOnceAppeared = _useState2[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring2 = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0,
    x: once && onceAppeared ? 0 : inView ? 0 : -10
  }),
      opacity = _useSpring2.opacity,
      x = _useSpring2.x;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: x.interpolate(function (x) {
        return "translate3d(" + x + "px, 0, 0)";
      })
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: x.interpolate(function (x) {
        return "translate3d(" + x + "px, 0, 0)";
      })
    }),
    ref: ref
  }), children);
}
function FadeInRight(_ref3) {
  var _ref3$threshold = _ref3.threshold,
      threshold = _ref3$threshold === void 0 ? 0 : _ref3$threshold,
      _ref3$element = _ref3.element,
      element = _ref3$element === void 0 ? 'div' : _ref3$element,
      _ref3$once = _ref3.once,
      once = _ref3$once === void 0 ? false : _ref3$once,
      children = _ref3.children,
      rest = _objectWithoutPropertiesLoose(_ref3, ["threshold", "element", "once", "children"]);

  var _useObserver3 = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver3.inView,
      ref = _useObserver3.ref;

  var _useState3 = react.useState(false),
      onceAppeared = _useState3[0],
      setOnceAppeared = _useState3[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring3 = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0,
    x: once && onceAppeared ? 0 : inView ? 0 : 10
  }),
      opacity = _useSpring3.opacity,
      x = _useSpring3.x;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: x.interpolate(function (x) {
        return "translate3d(" + x + "px, 0, 0)";
      })
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: x.interpolate(function (x) {
        return "translate3d(" + x + "px, 0, 0)";
      })
    }),
    ref: ref
  }), children);
}
function FadeInTop(_ref4) {
  var _ref4$threshold = _ref4.threshold,
      threshold = _ref4$threshold === void 0 ? 0 : _ref4$threshold,
      _ref4$element = _ref4.element,
      element = _ref4$element === void 0 ? 'div' : _ref4$element,
      _ref4$once = _ref4.once,
      once = _ref4$once === void 0 ? false : _ref4$once,
      children = _ref4.children,
      rest = _objectWithoutPropertiesLoose(_ref4, ["threshold", "element", "once", "children"]);

  var _useObserver4 = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver4.inView,
      ref = _useObserver4.ref;

  var _useState4 = react.useState(false),
      onceAppeared = _useState4[0],
      setOnceAppeared = _useState4[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring4 = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0,
    y: once && onceAppeared ? 0 : inView ? 0 : -10
  }),
      opacity = _useSpring4.opacity,
      y = _useSpring4.y;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: y.interpolate(function (y) {
        return "translate3d(0, " + y + "px, 0)";
      })
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: y.interpolate(function (y) {
        return "translate3d(0, " + y + "px, 0)";
      })
    }),
    ref: ref
  }), children);
}
function FadeInBottom(_ref5) {
  var _ref5$threshold = _ref5.threshold,
      threshold = _ref5$threshold === void 0 ? 0 : _ref5$threshold,
      _ref5$element = _ref5.element,
      element = _ref5$element === void 0 ? 'div' : _ref5$element,
      _ref5$once = _ref5.once,
      once = _ref5$once === void 0 ? false : _ref5$once,
      children = _ref5.children,
      rest = _objectWithoutPropertiesLoose(_ref5, ["threshold", "element", "once", "children"]);

  var _useObserver5 = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver5.inView,
      ref = _useObserver5.ref;

  var _useState5 = react.useState(false),
      onceAppeared = _useState5[0],
      setOnceAppeared = _useState5[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring5 = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0,
    y: once && onceAppeared ? 0 : inView ? 0 : 10
  }),
      opacity = _useSpring5.opacity,
      y = _useSpring5.y;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: y.interpolate(function (y) {
        return "translate3d(0, " + y + "px, 0)";
      })
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: y.interpolate(function (y) {
        return "translate3d(0, " + y + "px, 0)";
      })
    }),
    ref: ref
  }), children);
}

function BounceInLeft(_ref) {
  var _ref$threshold = _ref.threshold,
      threshold = _ref$threshold === void 0 ? 0 : _ref$threshold,
      _ref$mass = _ref.mass,
      mass = _ref$mass === void 0 ? 1 : _ref$mass,
      _ref$tension = _ref.tension,
      tension = _ref$tension === void 0 ? 180 : _ref$tension,
      _ref$friction = _ref.friction,
      friction = _ref$friction === void 0 ? 12 : _ref$friction,
      _ref$element = _ref.element,
      element = _ref$element === void 0 ? 'div' : _ref$element,
      _ref$once = _ref.once,
      once = _ref$once === void 0 ? false : _ref$once,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["threshold", "mass", "tension", "friction", "element", "once", "children"]);

  var _useObserver = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver.inView,
      ref = _useObserver.ref;

  var _useState = react.useState(false),
      onceAppeared = _useState[0],
      setOnceAppeared = _useState[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0
  }),
      opacity = _useSpring.opacity;

  var _useSpring2 = reactSpring.useSpring({
    x: once && onceAppeared ? 0 : inView ? 0 : -10,
    config: {
      mass: mass,
      tension: tension,
      friction: friction
    }
  }),
      x = _useSpring2.x;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: x.interpolate(function (x) {
        return "translate3d(" + x + "px, 0, 0)";
      })
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: x.interpolate(function (x) {
        return "translate3d(" + x + "px, 0, 0)";
      })
    }),
    ref: ref
  }), children);
}
function BounceInRight(_ref2) {
  var _ref2$threshold = _ref2.threshold,
      threshold = _ref2$threshold === void 0 ? 0 : _ref2$threshold,
      _ref2$mass = _ref2.mass,
      mass = _ref2$mass === void 0 ? 1 : _ref2$mass,
      _ref2$tension = _ref2.tension,
      tension = _ref2$tension === void 0 ? 180 : _ref2$tension,
      _ref2$friction = _ref2.friction,
      friction = _ref2$friction === void 0 ? 12 : _ref2$friction,
      _ref2$element = _ref2.element,
      element = _ref2$element === void 0 ? 'div' : _ref2$element,
      _ref2$once = _ref2.once,
      once = _ref2$once === void 0 ? false : _ref2$once,
      children = _ref2.children,
      rest = _objectWithoutPropertiesLoose(_ref2, ["threshold", "mass", "tension", "friction", "element", "once", "children"]);

  var _useObserver2 = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver2.inView,
      ref = _useObserver2.ref;

  var _useState2 = react.useState(false),
      onceAppeared = _useState2[0],
      setOnceAppeared = _useState2[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring3 = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0
  }),
      opacity = _useSpring3.opacity;

  var _useSpring4 = reactSpring.useSpring({
    x: once && onceAppeared ? 0 : inView ? 0 : 10,
    config: {
      mass: mass,
      tension: tension,
      friction: friction
    }
  }),
      x = _useSpring4.x;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: x.interpolate(function (x) {
        return "translate3d(" + x + "px, 0, 0)";
      })
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: x.interpolate(function (x) {
        return "translate3d(" + x + "px, 0, 0)";
      })
    }),
    ref: ref
  }), children);
}
function BounceInTop(_ref3) {
  var _ref3$threshold = _ref3.threshold,
      threshold = _ref3$threshold === void 0 ? 0 : _ref3$threshold,
      _ref3$mass = _ref3.mass,
      mass = _ref3$mass === void 0 ? 1 : _ref3$mass,
      _ref3$tension = _ref3.tension,
      tension = _ref3$tension === void 0 ? 180 : _ref3$tension,
      _ref3$friction = _ref3.friction,
      friction = _ref3$friction === void 0 ? 12 : _ref3$friction,
      _ref3$element = _ref3.element,
      element = _ref3$element === void 0 ? 'div' : _ref3$element,
      _ref3$once = _ref3.once,
      once = _ref3$once === void 0 ? false : _ref3$once,
      children = _ref3.children,
      rest = _objectWithoutPropertiesLoose(_ref3, ["threshold", "mass", "tension", "friction", "element", "once", "children"]);

  var _useObserver3 = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver3.inView,
      ref = _useObserver3.ref;

  var _useState3 = react.useState(false),
      onceAppeared = _useState3[0],
      setOnceAppeared = _useState3[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring5 = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0
  }),
      opacity = _useSpring5.opacity;

  var _useSpring6 = reactSpring.useSpring({
    y: once && onceAppeared ? 0 : inView ? 0 : -10,
    config: {
      mass: mass,
      tension: tension,
      friction: friction
    }
  }),
      y = _useSpring6.y;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: y.interpolate(function (y) {
        return "translate3d(0, " + y + "px, 0)";
      })
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: y.interpolate(function (y) {
        return "translate3d(0, " + y + "px, 0)";
      })
    }),
    ref: ref
  }), children);
}
function BounceInBottom(_ref4) {
  var _ref4$threshold = _ref4.threshold,
      threshold = _ref4$threshold === void 0 ? 0 : _ref4$threshold,
      _ref4$mass = _ref4.mass,
      mass = _ref4$mass === void 0 ? 1 : _ref4$mass,
      _ref4$tension = _ref4.tension,
      tension = _ref4$tension === void 0 ? 180 : _ref4$tension,
      _ref4$friction = _ref4.friction,
      friction = _ref4$friction === void 0 ? 12 : _ref4$friction,
      _ref4$element = _ref4.element,
      element = _ref4$element === void 0 ? 'div' : _ref4$element,
      _ref4$once = _ref4.once,
      once = _ref4$once === void 0 ? false : _ref4$once,
      children = _ref4.children,
      rest = _objectWithoutPropertiesLoose(_ref4, ["threshold", "mass", "tension", "friction", "element", "once", "children"]);

  var _useObserver4 = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver4.inView,
      ref = _useObserver4.ref;

  var _useState4 = react.useState(false),
      onceAppeared = _useState4[0],
      setOnceAppeared = _useState4[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring7 = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0
  }),
      opacity = _useSpring7.opacity;

  var _useSpring8 = reactSpring.useSpring({
    y: once && onceAppeared ? 0 : inView ? 0 : 10,
    config: {
      mass: mass,
      tension: tension,
      friction: friction
    }
  }),
      y = _useSpring8.y;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: y.interpolate(function (y) {
        return "translate3d(0, " + y + "px, 0)";
      })
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: y.interpolate(function (y) {
        return "translate3d(0, " + y + "px, 0)";
      })
    }),
    ref: ref
  }), children);
}

function PopIn(_ref) {
  var _ref$threshold = _ref.threshold,
      threshold = _ref$threshold === void 0 ? 0 : _ref$threshold,
      _ref$mass = _ref.mass,
      mass = _ref$mass === void 0 ? 1 : _ref$mass,
      _ref$tension = _ref.tension,
      tension = _ref$tension === void 0 ? 180 : _ref$tension,
      _ref$friction = _ref.friction,
      friction = _ref$friction === void 0 ? 12 : _ref$friction,
      _ref$element = _ref.element,
      element = _ref$element === void 0 ? 'div' : _ref$element,
      _ref$once = _ref.once,
      once = _ref$once === void 0 ? false : _ref$once,
      children = _ref.children,
      rest = _objectWithoutPropertiesLoose(_ref, ["threshold", "mass", "tension", "friction", "element", "once", "children"]);

  var _useObserver = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver.inView,
      ref = _useObserver.ref;

  var _useState = react.useState(false),
      onceAppeared = _useState[0],
      setOnceAppeared = _useState[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0
  }),
      opacity = _useSpring.opacity;

  var _useSpring2 = reactSpring.useSpring({
    scale: once && onceAppeared ? 1 : inView ? 1 : 0.8,
    config: {
      mass: mass,
      tension: tension,
      friction: friction
    }
  }),
      scale = _useSpring2.scale;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: scale.interpolate(function (scale) {
        return "scale(" + scale + ")";
      })
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: scale.interpolate(function (scale) {
        return "scale(" + scale + ")";
      })
    }),
    ref: ref
  }), children);
}
function PopInLeft(_ref2) {
  var _ref2$threshold = _ref2.threshold,
      threshold = _ref2$threshold === void 0 ? 0 : _ref2$threshold,
      _ref2$mass = _ref2.mass,
      mass = _ref2$mass === void 0 ? 1 : _ref2$mass,
      _ref2$tension = _ref2.tension,
      tension = _ref2$tension === void 0 ? 180 : _ref2$tension,
      _ref2$friction = _ref2.friction,
      friction = _ref2$friction === void 0 ? 12 : _ref2$friction,
      _ref2$element = _ref2.element,
      element = _ref2$element === void 0 ? 'div' : _ref2$element,
      _ref2$once = _ref2.once,
      once = _ref2$once === void 0 ? false : _ref2$once,
      children = _ref2.children,
      rest = _objectWithoutPropertiesLoose(_ref2, ["threshold", "mass", "tension", "friction", "element", "once", "children"]);

  var _useObserver2 = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver2.inView,
      ref = _useObserver2.ref;

  var _useState2 = react.useState(false),
      onceAppeared = _useState2[0],
      setOnceAppeared = _useState2[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring3 = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0
  }),
      opacity = _useSpring3.opacity;

  var _useSpring4 = reactSpring.useSpring({
    transform: once && onceAppeared ? "translate3d(0, 0, 0) scale(1)" : inView ? "translate3d(0, 0, 0) scale(1)" : "translate3d(-50px, 0, 0) scale(0.8)",
    config: {
      mass: mass,
      tension: tension,
      friction: friction
    }
  }),
      transform = _useSpring4.transform;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: transform
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: transform
    }),
    ref: ref
  }), children);
}
function PopInRight(_ref3) {
  var _ref3$threshold = _ref3.threshold,
      threshold = _ref3$threshold === void 0 ? 0 : _ref3$threshold,
      _ref3$mass = _ref3.mass,
      mass = _ref3$mass === void 0 ? 1 : _ref3$mass,
      _ref3$tension = _ref3.tension,
      tension = _ref3$tension === void 0 ? 180 : _ref3$tension,
      _ref3$friction = _ref3.friction,
      friction = _ref3$friction === void 0 ? 12 : _ref3$friction,
      _ref3$element = _ref3.element,
      element = _ref3$element === void 0 ? 'div' : _ref3$element,
      _ref3$once = _ref3.once,
      once = _ref3$once === void 0 ? false : _ref3$once,
      children = _ref3.children,
      rest = _objectWithoutPropertiesLoose(_ref3, ["threshold", "mass", "tension", "friction", "element", "once", "children"]);

  var _useObserver3 = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver3.inView,
      ref = _useObserver3.ref;

  var _useState3 = react.useState(false),
      onceAppeared = _useState3[0],
      setOnceAppeared = _useState3[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring5 = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0
  }),
      opacity = _useSpring5.opacity;

  var _useSpring6 = reactSpring.useSpring({
    transform: once && onceAppeared ? "tranlate3d(0, 0, 0) scale(1)" : inView ? "translate3d(0, 0, 0) scale(1)" : "translate3d(50px, 0, 0) scale(0.8)",
    config: {
      mass: mass,
      tension: tension,
      friction: friction
    }
  }),
      transform = _useSpring6.transform;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: transform
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: transform
    }),
    ref: ref
  }), children);
}
function PopInTop(_ref4) {
  var _ref4$threshold = _ref4.threshold,
      threshold = _ref4$threshold === void 0 ? 0 : _ref4$threshold,
      _ref4$mass = _ref4.mass,
      mass = _ref4$mass === void 0 ? 1 : _ref4$mass,
      _ref4$tension = _ref4.tension,
      tension = _ref4$tension === void 0 ? 180 : _ref4$tension,
      _ref4$friction = _ref4.friction,
      friction = _ref4$friction === void 0 ? 12 : _ref4$friction,
      _ref4$element = _ref4.element,
      element = _ref4$element === void 0 ? 'div' : _ref4$element,
      _ref4$once = _ref4.once,
      once = _ref4$once === void 0 ? false : _ref4$once,
      children = _ref4.children,
      rest = _objectWithoutPropertiesLoose(_ref4, ["threshold", "mass", "tension", "friction", "element", "once", "children"]);

  var _useObserver4 = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver4.inView,
      ref = _useObserver4.ref;

  var _useState4 = react.useState(false),
      onceAppeared = _useState4[0],
      setOnceAppeared = _useState4[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring7 = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0
  }),
      opacity = _useSpring7.opacity;

  var _useSpring8 = reactSpring.useSpring({
    transform: once && onceAppeared ? "tranlate3d(0, 0, 0) scale(1)" : inView ? "translate3d(0, 0, 0) scale(1)" : "translate3d(0, 50px, 0) scale(0.8)",
    config: {
      mass: mass,
      tension: tension,
      friction: friction
    }
  }),
      transform = _useSpring8.transform;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: transform
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: transform
    }),
    ref: ref
  }), children);
}
function PopInBottom(_ref5) {
  var _ref5$threshold = _ref5.threshold,
      threshold = _ref5$threshold === void 0 ? 0 : _ref5$threshold,
      _ref5$mass = _ref5.mass,
      mass = _ref5$mass === void 0 ? 1 : _ref5$mass,
      _ref5$tension = _ref5.tension,
      tension = _ref5$tension === void 0 ? 180 : _ref5$tension,
      _ref5$friction = _ref5.friction,
      friction = _ref5$friction === void 0 ? 12 : _ref5$friction,
      _ref5$element = _ref5.element,
      element = _ref5$element === void 0 ? 'div' : _ref5$element,
      _ref5$once = _ref5.once,
      once = _ref5$once === void 0 ? false : _ref5$once,
      children = _ref5.children,
      rest = _objectWithoutPropertiesLoose(_ref5, ["threshold", "mass", "tension", "friction", "element", "once", "children"]);

  var _useObserver5 = useObserver.useObserver({
    threshold: threshold
  }),
      inView = _useObserver5.inView,
      ref = _useObserver5.ref;

  var _useState5 = react.useState(false),
      onceAppeared = _useState5[0],
      setOnceAppeared = _useState5[1];

  react.useEffect(function () {
    if (once && inView && !onceAppeared) setOnceAppeared(true);
  }, [inView]);

  var _useSpring9 = reactSpring.useSpring({
    opacity: once && onceAppeared ? 1 : inView ? 1 : 0
  }),
      opacity = _useSpring9.opacity;

  var _useSpring10 = reactSpring.useSpring({
    transform: once && onceAppeared ? "tranlate3d(0, 0, 0) scale(1)" : inView ? "translate3d(0, 0, 0) scale(1)" : "translate3d(0, -50px, 0) scale(0.8)",
    config: {
      mass: mass,
      tension: tension,
      friction: friction
    }
  }),
      transform = _useSpring10.transform;

  var animatedRef = react.useRef(react.createElement(reactSpring.animated(element), _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: transform
    }),
    ref: ref
  }), children));
  return react.cloneElement(animatedRef.current, _extends({}, rest, {
    style: _extends({}, rest.style, {
      opacity: opacity,
      transform: transform
    }),
    ref: ref
  }), children);
}

exports.BounceInBottom = BounceInBottom;
exports.BounceInLeft = BounceInLeft;
exports.BounceInRight = BounceInRight;
exports.BounceInTop = BounceInTop;
exports.FadeIn = FadeIn;
exports.FadeInBottom = FadeInBottom;
exports.FadeInLeft = FadeInLeft;
exports.FadeInRight = FadeInRight;
exports.FadeInTop = FadeInTop;
exports.PopIn = PopIn;
exports.PopInBottom = PopInBottom;
exports.PopInLeft = PopInLeft;
exports.PopInRight = PopInRight;
exports.PopInTop = PopInTop;
//# sourceMappingURL=react-spring-pop.cjs.development.js.map
