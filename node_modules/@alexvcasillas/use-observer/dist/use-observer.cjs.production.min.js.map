{"version":3,"file":"use-observer.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\n\ntype ObserverType = {\n  threshold: number,\n  rootMargin?: string,\n};\n\nexport function useObserver({ threshold, rootMargin = '0px' }: ObserverType) {\n\n  const [inView, setInView] = useState<boolean>();\n  const ref = useRef<any>();\n  const iObserverRef = useRef<IntersectionObserver>();\n\n  useEffect(() => {\n    let options = {\n      root: null,\n      rootMargin: rootMargin,\n      threshold: threshold\n    }\n    \n    iObserverRef.current = new IntersectionObserver((entries) => {\n      if (inView !== entries[0].isIntersecting) {\n        setInView(entries[0].isIntersecting);\n      }\n    }, options);\n  }, []);\n\n  useEffect(() => {\n    // @ts-ignore\n    if (ref.current) iObserverRef.current.observe(ref.current);\n    return () => {\n      if (ref.current) {\n        // @ts-ignore\n        iObserverRef.current.unobserve(ref.current);\n        // @ts-ignore\n        iObserverRef.current.disconnect();\n      }\n    }\n  }, [ref.current])\n\n  return { inView, ref };\n}"],"names":["threshold","rootMargin","useState","inView","setInView","ref","useRef","iObserverRef","useEffect","current","IntersectionObserver","entries","isIntersecting","root","observe","unobserve","disconnect"],"mappings":"wEAO8BA,IAAAA,cAAWC,WAAAA,aAAa,UAExBC,aAArBC,OAAQC,OACTC,EAAMC,WACNC,EAAeD,kBAErBE,YAAU,WAORD,EAAaE,QAAU,IAAIC,qBAAqB,SAACC,GAC3CR,IAAWQ,EAAQ,GAAGC,gBACxBR,EAAUO,EAAQ,GAAGC,iBARX,CACZC,KAAM,KACNZ,WAAYA,EACZD,UAAWA,KAQZ,IAEHQ,YAAU,kBAEJH,EAAII,SAASF,EAAaE,QAAQK,QAAQT,EAAII,SAC3C,WACDJ,EAAII,UAENF,EAAaE,QAAQM,UAAUV,EAAII,SAEnCF,EAAaE,QAAQO,gBAGxB,CAACX,EAAII,UAED,CAAEN,OAAAA,EAAQE,IAAAA"}