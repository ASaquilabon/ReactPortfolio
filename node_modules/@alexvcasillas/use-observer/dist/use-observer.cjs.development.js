'use strict';

var react = require('react');

function useObserver(_ref) {
  var threshold = _ref.threshold,
      _ref$rootMargin = _ref.rootMargin,
      rootMargin = _ref$rootMargin === void 0 ? '0px' : _ref$rootMargin;

  var _useState = react.useState(),
      inView = _useState[0],
      setInView = _useState[1];

  var ref = react.useRef();
  var iObserverRef = react.useRef();
  react.useEffect(function () {
    var options = {
      root: null,
      rootMargin: rootMargin,
      threshold: threshold
    };
    iObserverRef.current = new IntersectionObserver(function (entries) {
      if (inView !== entries[0].isIntersecting) {
        setInView(entries[0].isIntersecting);
      }
    }, options);
  }, []);
  react.useEffect(function () {
    // @ts-ignore
    if (ref.current) iObserverRef.current.observe(ref.current);
    return function () {
      if (ref.current) {
        // @ts-ignore
        iObserverRef.current.unobserve(ref.current); // @ts-ignore

        iObserverRef.current.disconnect();
      }
    };
  }, [ref.current]);
  return {
    inView: inView,
    ref: ref
  };
}

exports.useObserver = useObserver;
//# sourceMappingURL=use-observer.cjs.development.js.map
